name: Deploy PWA Applications

on:
  push:
    branches: [ main ]
    paths:
      - 'domains/idea-generation/apps/bmc-pwa/**'
      - 'domains/idea-generation/apps/ideas-pwa/**'
      - 'package.json'
      - 'nx.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'domains/idea-generation/apps/bmc-pwa/**'
      - 'domains/idea-generation/apps/ideas-pwa/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AWS_REGION: us-east-1
  S3_BUCKET: ai-business-factory-pwa-workspace-dev
  BMC_DISTRIBUTION_ID: EUO9GQDWDTUHA
  IDEAS_DISTRIBUTION_ID: EUHOKVJAA3CUM

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test -- --watchAll=false --passWithNoTests

      - name: Lint code
        run: npm run lint --if-present

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        app: [bmc-pwa, ideas-pwa]
    outputs:
      bmc-build-hash: ${{ steps.build-bmc.outputs.hash }}
      ideas-build-hash: ${{ steps.build-ideas.outputs.hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build ${{ matrix.app }}
        run: npm run build:${{ matrix.app }}

      - name: Calculate build hash for BMC PWA
        if: matrix.app == 'bmc-pwa'
        id: build-bmc
        run: |
          HASH=$(find dist/apps/bmc-pwa -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Calculate build hash for Ideas PWA
        if: matrix.app == 'ideas-pwa'
        id: build-ideas
        run: |
          HASH=$(find dist/apps/ideas-pwa -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-build
          path: dist/apps/${{ matrix.app }}/
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Download BMC PWA artifacts
        uses: actions/download-artifact@v4
        with:
          name: bmc-pwa-build
          path: dist/apps/bmc-pwa/

      - name: Download Ideas PWA artifacts
        uses: actions/download-artifact@v4
        with:
          name: ideas-pwa-build
          path: dist/apps/ideas-pwa/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy BMC PWA to S3
        run: |
          aws s3 sync dist/apps/bmc-pwa/ s3://${{ env.S3_BUCKET }}/bmc/ \
            --delete \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "*.html" \
            --exclude "sw.js" \
            --exclude "manifest.*"
          
          # Set no-cache for HTML and service worker files
          aws s3 sync dist/apps/bmc-pwa/ s3://${{ env.S3_BUCKET }}/bmc/ \
            --cache-control "public,max-age=0,must-revalidate" \
            --include "*.html" \
            --include "sw.js" \
            --include "manifest.*"

      - name: Deploy Ideas PWA to S3
        run: |
          aws s3 sync dist/apps/ideas-pwa/ s3://${{ env.S3_BUCKET }}/ideas/ \
            --delete \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "*.html"
          
          # Set no-cache for HTML files
          aws s3 sync dist/apps/ideas-pwa/ s3://${{ env.S3_BUCKET }}/ideas/ \
            --cache-control "public,max-age=0,must-revalidate" \
            --include "*.html"

      - name: Invalidate CloudFront distributions
        run: |
          # Invalidate BMC PWA distribution
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.BMC_DISTRIBUTION_ID }} \
            --paths "/*"
          
          # Invalidate Ideas PWA distribution
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.IDEAS_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Wait for invalidations to complete
        run: |
          echo "Waiting for CloudFront invalidations to complete..."
          sleep 30

  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Health check BMC PWA
        run: |
          echo "Checking BMC PWA health..."
          response=$(curl -s -o /dev/null -w "%{http_code}" https://d1u91xxklexz0v.cloudfront.net)
          if [ "$response" != "200" ]; then
            echo "‚ùå BMC PWA health check failed: HTTP $response"
            exit 1
          fi
          echo "‚úÖ BMC PWA is healthy: HTTP $response"

      - name: Health check Ideas PWA
        run: |
          echo "Checking Ideas PWA health..."
          response=$(curl -s -o /dev/null -w "%{http_code}" https://dc275i5wdcepx.cloudfront.net)
          if [ "$response" != "200" ]; then
            echo "‚ùå Ideas PWA health check failed: HTTP $response"
            exit 1
          fi
          echo "‚úÖ Ideas PWA is healthy: HTTP $response"

      - name: Test SPA routing
        run: |
          echo "Testing SPA routing..."
          # Test BMC PWA routing
          bmc_spa=$(curl -s -o /dev/null -w "%{http_code}" https://d1u91xxklexz0v.cloudfront.net/test-route)
          if [ "$bmc_spa" != "200" ]; then
            echo "‚ùå BMC PWA SPA routing failed: HTTP $bmc_spa"
            exit 1
          fi
          
          # Test Ideas PWA routing
          ideas_spa=$(curl -s -o /dev/null -w "%{http_code}" https://dc275i5wdcepx.cloudfront.net/test-route)
          if [ "$ideas_spa" != "200" ]; then
            echo "‚ùå Ideas PWA SPA routing failed: HTTP $ideas_spa"
            exit 1
          fi
          
          echo "‚úÖ SPA routing is working for both PWAs"

      - name: Deployment summary
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "üì± BMC PWA: https://d1u91xxklexz0v.cloudfront.net"
          echo "üí° Ideas PWA: https://dc275i5wdcepx.cloudfront.net"
          echo "üìä Build hashes:"
          echo "   BMC: ${{ needs.build.outputs.bmc-build-hash }}"
          echo "   Ideas: ${{ needs.build.outputs.ideas-build-hash }}"