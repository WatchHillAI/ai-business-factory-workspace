name: Deploy Schema via Lambda

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1

jobs:
  deploy-lambda:
    name: Deploy Schema Lambda Function
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          role-session-name: GitHubActions-SchemaLambdaDeployment
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Build Lambda Package
        working-directory: ./infrastructure/lambda/deploy-schema
        run: |
          echo "üî® Building Lambda deployment package..."
          chmod +x build.sh
          ./build.sh
          
      - name: Get VPC Configuration
        id: vpc_config
        run: |
          echo "üîç Getting VPC configuration for Lambda..."
          
          # Get VPC and subnet details
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
          SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[*].SubnetId' --output text | tr '\t' ',')
          
          # Get security group for RDS access
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=*rds*" "Name=vpc-id,Values=$VPC_ID" --query 'SecurityGroups[0].GroupId' --output text)
          
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
          echo "SUBNET_IDS=$SUBNET_IDS" >> $GITHUB_ENV
          echo "SECURITY_GROUP_ID=$SG_ID" >> $GITHUB_ENV
          
          echo "Found VPC: $VPC_ID"
          echo "Found subnets: $SUBNET_IDS"
          echo "Found security group: $SG_ID"
          
      - name: Deploy Lambda Function
        working-directory: ./infrastructure/lambda/deploy-schema
        run: |
          echo "üöÄ Deploying Lambda function..."
          
          FUNCTION_NAME="ai-business-factory-schema-deployer-${{ github.event.inputs.environment || 'dev' }}"
          
          # Get database details
          DB_ENDPOINT=$(aws rds describe-db-clusters --db-cluster-identifier ai-business-factory-db-dev --query 'DBClusters[0].Endpoint' --output text)
          SECRET_ARN=$(aws secretsmanager list-secrets --filters Key=name,Values=ai-business-factory-db-dev-credentials --query 'SecretList[0].ARN' --output text)
          
          # Create or update Lambda function
          if aws lambda get-function --function-name "$FUNCTION_NAME" >/dev/null 2>&1; then
            echo "Updating existing Lambda function..."
            aws lambda update-function-code \
              --function-name "$FUNCTION_NAME" \
              --zip-file fileb://lambda.zip
              
            aws lambda update-function-configuration \
              --function-name "$FUNCTION_NAME" \
              --environment Variables="{DB_ENDPOINT=$DB_ENDPOINT,DB_PORT=5432,DB_NAME=ai_business_factory,DB_SECRET_ARN=$SECRET_ARN}"
          else
            echo "Creating new Lambda function..."
            
            # Create IAM role for Lambda
            ROLE_NAME="${FUNCTION_NAME}-role"
            TRUST_POLICY='{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
            
            aws iam create-role --role-name "$ROLE_NAME" --assume-role-policy-document "$TRUST_POLICY" || true
            
            # Attach policies
            aws iam attach-role-policy --role-name "$ROLE_NAME" --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
            
            # Create policy for Secrets Manager access
            POLICY_DOC=$(cat <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": ["secretsmanager:GetSecretValue"],
      "Resource": "$SECRET_ARN"
    }
  ]
}
EOF
)
            
            aws iam put-role-policy --role-name "$ROLE_NAME" --policy-name "SecretsManagerAccess" --policy-document "$POLICY_DOC"
            
            # Wait for role to be ready
            sleep 10
            
            ROLE_ARN=$(aws iam get-role --role-name "$ROLE_NAME" --query 'Role.Arn' --output text)
            
            # Create Lambda function
            aws lambda create-function \
              --function-name "$FUNCTION_NAME" \
              --runtime nodejs18.x \
              --role "$ROLE_ARN" \
              --handler index.handler \
              --zip-file fileb://lambda.zip \
              --timeout 300 \
              --memory-size 512 \
              --vpc-config SubnetIds="$SUBNET_IDS",SecurityGroupIds="$SECURITY_GROUP_ID" \
              --environment Variables="{DB_ENDPOINT=$DB_ENDPOINT,DB_PORT=5432,DB_NAME=ai_business_factory,DB_SECRET_ARN=$SECRET_ARN}"
          fi
          
          echo "‚úÖ Lambda function deployed: $FUNCTION_NAME"
          
      - name: Execute Schema Deployment
        run: |
          echo "üóÉÔ∏è Executing schema deployment..."
          
          FUNCTION_NAME="ai-business-factory-schema-deployer-${{ github.event.inputs.environment || 'dev' }}"
          
          # Invoke Lambda function
          RESULT=$(aws lambda invoke \
            --function-name "$FUNCTION_NAME" \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            response.json)
          
          echo "Lambda invocation result:"
          echo "$RESULT"
          
          echo "Lambda response:"
          cat response.json
          
          # Check if deployment was successful
          STATUS=$(jq -r '.status' response.json 2>/dev/null || echo "unknown")
          
          if [ "$STATUS" = "success" ] || [ "$STATUS" = "skipped" ]; then
            echo "‚úÖ Schema deployment completed successfully!"
          else
            echo "‚ùå Schema deployment failed!"
            exit 1
          fi
          
      - name: Verify Deployment
        run: |
          echo "üß™ Verifying schema deployment..."
          
          FUNCTION_NAME="ai-business-factory-schema-deployer-${{ github.event.inputs.environment || 'dev' }}"
          
          # Create verification payload
          VERIFY_PAYLOAD='{"action": "verify"}'
          
          aws lambda invoke \
            --function-name "$FUNCTION_NAME" \
            --payload "$VERIFY_PAYLOAD" \
            --cli-binary-format raw-in-base64-out \
            verify_response.json
          
          echo "Verification response:"
          cat verify_response.json
          
          echo "‚úÖ Schema deployment verified!"
          
      - name: Generate Summary
        run: |
          echo "üìä Lambda Schema Deployment Summary"
          echo ""
          echo "**Status**: ‚úÖ Deployed Successfully via Lambda"
          echo "**Environment**: \`${{ github.event.inputs.environment || 'dev' }}\`"
          echo "**Method**: Lambda function within VPC"
          echo "**Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo ""
          echo "### üìã Deployment Details"
          echo "- ‚úÖ Lambda function deployed and executed"
          echo "- ‚úÖ Schema deployed within VPC"
          echo "- ‚úÖ Database connection verified"
          echo "- ‚úÖ Tables and indexes created"
          echo ""
          echo "### üîó Next Steps"
          echo "1. Implement CRUD API endpoints"
          echo "2. Update AI orchestrator for persistence"
          echo "3. Connect Ideas PWA to database"